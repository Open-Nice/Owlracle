# You must first activate a Billing Account here: https://platform.openai.com/account/billing/overview
# Then get your OpenAI API Key here: https://platform.openai.com/account/api-keys
OPENAI_API_KEY=""

# Generate a random secret: https://generate-secret.vercel.app/32 or `openssl rand -base64 32`
AUTH_SECRET=""

# Instructions to create kv database here: https://vercel.com/docs/storage/vercel-kv/quickstart and 
KV_URL=""
KV_REST_API_URL=""
KV_REST_API_TOKEN=""
KV_REST_API_READ_ONLY_TOKEN=""

# Instructions to create prisma proxy https://www.prisma.io/blog/database-access-on-the-edge-8F0t1s1BqOJE
PRISMA_URI=""
MIGRATE_DATABASE_URL=""

# Setup Google oAuth here https://developers.google.com/identity/protocols/oauth2
GOOGLE_CLIENT_ID=""
GOOGLE_CLIENT_SECRET=""

# Create Supabase account https://supabase.com/dashboard/sign-in?returnTo=%2Fdashboard%2Fproject%2Fbfoagpyqdkwxvfcvfxbe%2Fsql
SUPABASE_URL=""
SUPABASE_SERVICE_KEY=""
# Afterwards run the following SQL query
# -- Enable the pgvector extension to work with embedding vectors
# create extension vector;

# -- Create a table to store your documents
# create table documents (
#   id uuid primary key,
#   content text, -- corresponds to Document.pageContent
#   metadata jsonb, -- corresponds to Document.metadata
#   embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed
# );

# -- Create a function to search for documents
# create function match_documents (
#   query_embedding vector(1536),
#   match_count int default null,
#   filter jsonb DEFAULT '{}'
# ) returns table (
#   id bigint,
#   content text,
#   metadata jsonb,
#   similarity float
# )
# language plpgsql
# as $$
# #variable_conflict use_column
# begin
#   return query
#   select
#     id,
#     content,
#     metadata,
#     1 - (documents.embedding <=> query_embedding) as similarity
#   from documents
#   where metadata @> filter
#   order by documents.embedding <=> query_embedding
#   limit match_count;
# end;
# $$;